class Account{
	declare {
    	int	amount;
		int a = 5;
    }

	assume{
		amount > 0;	
	}
    
//   amount = 5;
//   ID = 8;
	
	func int increase(int x, int y){
		require {
			x > 0;
		}
		amount = amount + x;
        
        if (x > 10) {
        	 x = p || q && r;
             x = p && q || r;
        }else if (x > 9) {
        
        }else {
        
        } 
        
		ensure {
			amount == amount + x;
		}		
	}
	
	assert {
		amount > 0;
	}
}
////////////////////////////////////////////////////////////////////////////

wp(x := e, R)=R[x ∶=e]

R[x ∶= e] means to substitute all free occurrences of variable x in
postcondition R by expression e.

WP(amount' = amount + x, amount' == amount + x)
= (amount + x == amount + x)

x > 0 => (amount + x = amount + x)
= all acc: Account | x > 0 => plus[acc.amount, x] = plus[acc.amount, x]

without precondition:
all acc: Account | plus[acc.amount, x] = plus[acc.amount, x]

/////////////////////////////////alloy////////////////////////////////////
module Account

sig Account{
	amount: Int,
	ID: 5
}

fact{
	all acc: Account| acc.amount > 0
}

pred increase[x: Int] {
	!(all acc: Account | x > 0 => plus[acc.amount, x] = plus[acc.amount, x])
}

assert invariant {
	all acc: Account | acc.amount > 0
}

run increase for 20

check invariant
