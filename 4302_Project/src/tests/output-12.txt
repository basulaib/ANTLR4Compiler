
open util/boolean

//==============test==============
some sig test{
	result:String
}

fact testFact {
}

assert testAssert {
	all n: test| (((n.result) = ("x")) or ((n.result) = ("y"))) or ((n.result) = ("equal"))
}

//the class invariant for class (test) is only valid if this check is valid
check testAssert

pred smallerCheck[x:Int, y:Int]{
	some n: test| not ((((x) > (0)) and ((y) > (0))) => (((x) < (y)) => (((("x") = ("x")) or (("x") = ("y"))) or (("x") = ("equal")))))
}

//the post condition for function (smaller) is only valid when this is inconsistent.
run {
	some x: Int| some y: Int| smallerCheck[x, y]
}for 8 but 8 int, 2 Bool, exactly 32 String