
open util/boolean

//==============test==============
some sig test{
	result:Int
}

fact testFact {
}

assert testAssert {
	all n: test| (n.result) >= (0)
}

//the class invariant for class (test) is only valid if this check is valid
check testAssert

pred divCheck[x:Int, y:Int]{
	some n: test| not ((((x) >= (0)) and ((y) > (0))) => ((div[x][y]) = (div[x][y])))
}

//the post condition for function (div) is only valid when this is inconsistent.
run {
	some x: Int| some y: Int| divCheck[x, y]
}for 8 but 8 int, 2 Bool, exactly 32 String