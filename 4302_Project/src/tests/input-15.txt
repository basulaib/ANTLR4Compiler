//test for loop
// THIS FILE IS NOT COMPLETE, DO NOT SUBMIT THIS TEST

class LoopTest{
    declare {
        int x;
        int z;
    }
    
    func void decrease(){
        loop {
            from {
                x = 5;
                z = 1;
            }

            until {
                x == 2;
            }

            invariant {
                x > z;
            }

            do {
                x = x - 1;
    //            z = 0;
    //            x = x == x - z;
    //            if (x > z) {
    //                x = 0;
    //            }
            }

            variant {
                x;
            }
        }
    }
}


// 2 things: 1. always make a deep copy of expression when doing replacement
//            2.  free up all the locked variables after exiting the loop?
// ((5) > (1))
//
//((((5) > (1)) and (not ((n.x) = (2)))) => ((5) > (1)))
//
//(((5) > (1)) and ((n.x) = (2))) => (1=1)
//
//((((5) > (1)) and (not ((n.x) = (2)))) => ((minus[n.x][1]) >= (0)))
//
//(((5) > (1)) and (not ((n.x) = (2)))) => ((minus[n.x][1]) < (minus[n.x][1]))