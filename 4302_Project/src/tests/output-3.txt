
open util/boolean

//==============Student==============
some sig Student{
	name:"Jackie",
	id:Int,
	course:"EECS 4302",
	gpa:9,
	age:999,
	year:4,
	iq:750
}

fact StudentFact {
	all n: Student| (n.gpa) >= (5)
	all n: Student| (n.year) >= (2)
	all n: Student| (n.age) >= (100)
	all n: Student| (n.id) >= (0)
	all n: Student| (n.name) != (none)
	all n: Student| (n.course) != (none)
}

assert StudentAssert {
}

//the class invariant for class (Student) is only valid if this check is valid
check StudentAssert

//==============Professor==============
some sig Professor{
	name:"Trudeau",
	course:"EECS 4302",
	pay:95000,
	tenure:False,
	exp_years:1
}

fact ProfessorFact {
	all n: Professor| (n.pay) > (50000)
	all n: Professor| (n.tenure) = (False)
}

assert ProfessorAssert {
	all n: Professor| (n.pay) > (50000)
	all n: Professor| (n.exp_years) >= (1)
}

//the class invariant for class (Professor) is only valid if this check is valid
check ProfessorAssert

//==============Course==============
some sig Course{
	name:String,
	code:Int,
	fee:Int,
	semester:String,
	year:Int,
	instructor:String,
	department:String,
	lecture_room:String
}

fact CourseFact {
	all n: Course| (n.name) != (none)
	all n: Course| (n.code) > (0)
	all n: Course| (n.fee) > (0)
	all n: Course| (((((n.semester) = ("F")) or ((n.semester) = ("W"))) or ((n.semester) = ("S1"))) or ((n.semester) = ("S2"))) or ((n.semester) = ("SU"))
	all n: Course| ((n.year) > (0)) and ((n.year) < (5))
}

assert CourseAssert {
}

//the class invariant for class (Course) is only valid if this check is valid
check CourseAssert