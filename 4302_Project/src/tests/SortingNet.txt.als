
open util/boolean
open util/sequniv

//==============SortingNet==============
some sig SortingNet{
	arr:seq Int,
	tmp:Int,
	old_i:Int,
	old_j:Int
}

fact SortingNetFact {
}

pred sortCheck{
	some n: SortingNet| not ((((0) >= (0)) and ((1) >= (0))) and (((((n.arr[0]) <= (n.arr[1])) and (((n.old_i) > (n.old_j)) => (((n.arr[0]) = (n.old_j)) and ((n.arr[1]) = (n.old_i))))) and (((n.old_i) <= (n.old_j)) => (((n.arr[0]) = (n.old_i)) and ((n.arr[1]) = (n.old_j))))) => ((((3) >= (0)) and ((4) >= (0))) and (((((n.arr[3]) <= (n.arr[4])) and (((n.old_i) > (n.old_j)) => (((n.arr[3]) = (n.old_j)) and ((n.arr[4]) = (n.old_i))))) and (((n.old_i) <= (n.old_j)) => (((n.arr[3]) = (n.old_i)) and ((n.arr[4]) = (n.old_j))))) => ((((6) >= (0)) and ((7) >= (0))) and (((((n.arr[6]) <= (n.arr[7])) and (((n.old_i) > (n.old_j)) => (((n.arr[6]) = (n.old_j)) and ((n.arr[7]) = (n.old_i))))) and (((n.old_i) <= (n.old_j)) => (((n.arr[6]) = (n.old_i)) and ((n.arr[7]) = (n.old_j))))) => ((((1) >= (0)) and ((2) >= (0))) and (((((n.arr[1]) <= (n.arr[2])) and (((n.old_i) > (n.old_j)) => (((n.arr[1]) = (n.old_j)) and ((n.arr[2]) = (n.old_i))))) and (((n.old_i) <= (n.old_j)) => (((n.arr[1]) = (n.old_i)) and ((n.arr[2]) = (n.old_j))))) => ((((4) >= (0)) and ((5) >= (0))) and (((((n.arr[4]) <= (n.arr[5])) and (((n.old_i) > (n.old_j)) => (((n.arr[4]) = (n.old_j)) and ((n.arr[5]) = (n.old_i))))) and (((n.old_i) <= (n.old_j)) => (((n.arr[4]) = (n.old_i)) and ((n.arr[5]) = (n.old_j))))) => ((((7) >= (0)) and ((8) >= (0))) and (((((n.arr[7]) <= (n.arr[8])) and (((n.old_i) > (n.old_j)) => (((n.arr[7]) = (n.old_j)) and ((n.arr[8]) = (n.old_i))))) and (((n.old_i) <= (n.old_j)) => (((n.arr[7]) = (n.old_i)) and ((n.arr[8]) = (n.old_j))))) => ((((0) >= (0)) and ((1) >= (0))) and (((((n.arr[0]) <= (n.arr[1])) and (((n.old_i) > (n.old_j)) => (((n.arr[0]) = (n.old_j)) and ((n.arr[1]) = (n.old_i))))) and (((n.old_i) <= (n.old_j)) => (((n.arr[0]) = (n.old_i)) and ((n.arr[1]) = (n.old_j))))) => ((((3) >= (0)) and ((4) >= (0))) and (((((n.arr[3]) <= (n.arr[4])) and (((n.old_i) > (n.old_j)) => (((n.arr[3]) = (n.old_j)) and ((n.arr[4]) = (n.old_i))))) and (((n.old_i) <= (n.old_j)) => (((n.arr[3]) = (n.old_i)) and ((n.arr[4]) = (n.old_j))))) => ((((6) >= (0)) and ((7) >= (0))) and (((((n.arr[6]) <= (n.arr[7])) and (((n.old_i) > (n.old_j)) => (((n.arr[6]) = (n.old_j)) and ((n.arr[7]) = (n.old_i))))) and (((n.old_i) <= (n.old_j)) => (((n.arr[6]) = (n.old_i)) and ((n.arr[7]) = (n.old_j))))) => ((((0) >= (0)) and ((3) >= (0))) and (((((n.arr[0]) <= (n.arr[3])) and (((n.old_i) > (n.old_j)) => (((n.arr[0]) = (n.old_j)) and ((n.arr[3]) = (n.old_i))))) and (((n.old_i) <= (n.old_j)) => (((n.arr[0]) = (n.old_i)) and ((n.arr[3]) = (n.old_j))))) => ((((3) >= (0)) and ((6) >= (0))) and (((((n.arr[3]) <= (n.arr[6])) and (((n.old_i) > (n.old_j)) => (((n.arr[3]) = (n.old_j)) and ((n.arr[6]) = (n.old_i))))) and (((n.old_i) <= (n.old_j)) => (((n.arr[3]) = (n.old_i)) and ((n.arr[6]) = (n.old_j))))) => ((((0) >= (0)) and ((3) >= (0))) and (((((n.arr[0]) <= (n.arr[3])) and (((n.old_i) > (n.old_j)) => (((n.arr[0]) = (n.old_j)) and ((n.arr[3]) = (n.old_i))))) and (((n.old_i) <= (n.old_j)) => (((n.arr[0]) = (n.old_i)) and ((n.arr[3]) = (n.old_j))))) => ((((1) >= (0)) and ((4) >= (0))) and (((((n.arr[1]) <= (n.arr[4])) and (((n.old_i) > (n.old_j)) => (((n.arr[1]) = (n.old_j)) and ((n.arr[4]) = (n.old_i))))) and (((n.old_i) <= (n.old_j)) => (((n.arr[1]) = (n.old_i)) and ((n.arr[4]) = (n.old_j))))) => ((((4) >= (0)) and ((7) >= (0))) and (((((n.arr[4]) <= (n.arr[7])) and (((n.old_i) > (n.old_j)) => (((n.arr[4]) = (n.old_j)) and ((n.arr[7]) = (n.old_i))))) and (((n.old_i) <= (n.old_j)) => (((n.arr[4]) = (n.old_i)) and ((n.arr[7]) = (n.old_j))))) => ((((1) >= (0)) and ((4) >= (0))) and (((((n.arr[1]) <= (n.arr[4])) and (((n.old_i) > (n.old_j)) => (((n.arr[1]) = (n.old_j)) and ((n.arr[4]) = (n.old_i))))) and (((n.old_i) <= (n.old_j)) => (((n.arr[1]) = (n.old_i)) and ((n.arr[4]) = (n.old_j))))) => ((((2) >= (0)) and ((5) >= (0))) and (((((n.arr[2]) <= (n.arr[5])) and (((n.old_i) > (n.old_j)) => (((n.arr[2]) = (n.old_j)) and ((n.arr[5]) = (n.old_i))))) and (((n.old_i) <= (n.old_j)) => (((n.arr[2]) = (n.old_i)) and ((n.arr[5]) = (n.old_j))))) => ((((5) >= (0)) and ((8) >= (0))) and (((((n.arr[5]) <= (n.arr[8])) and (((n.old_i) > (n.old_j)) => (((n.arr[5]) = (n.old_j)) and ((n.arr[8]) = (n.old_i))))) and (((n.old_i) <= (n.old_j)) => (((n.arr[5]) = (n.old_i)) and ((n.arr[8]) = (n.old_j))))) => ((((2) >= (0)) and ((5) >= (0))) and (((((n.arr[2]) <= (n.arr[5])) and (((n.old_i) > (n.old_j)) => (((n.arr[2]) = (n.old_j)) and ((n.arr[5]) = (n.old_i))))) and (((n.old_i) <= (n.old_j)) => (((n.arr[2]) = (n.old_i)) and ((n.arr[5]) = (n.old_j))))) => ((((1) >= (0)) and ((3) >= (0))) and (((((n.arr[1]) <= (n.arr[3])) and (((n.old_i) > (n.old_j)) => (((n.arr[1]) = (n.old_j)) and ((n.arr[3]) = (n.old_i))))) and (((n.old_i) <= (n.old_j)) => (((n.arr[1]) = (n.old_i)) and ((n.arr[3]) = (n.old_j))))) => ((((5) >= (0)) and ((7) >= (0))) and (((((n.arr[5]) <= (n.arr[7])) and (((n.old_i) > (n.old_j)) => (((n.arr[5]) = (n.old_j)) and ((n.arr[7]) = (n.old_i))))) and (((n.old_i) <= (n.old_j)) => (((n.arr[5]) = (n.old_i)) and ((n.arr[7]) = (n.old_j))))) => ((((2) >= (0)) and ((6) >= (0))) and (((((n.arr[2]) <= (n.arr[6])) and (((n.old_i) > (n.old_j)) => (((n.arr[2]) = (n.old_j)) and ((n.arr[6]) = (n.old_i))))) and (((n.old_i) <= (n.old_j)) => (((n.arr[2]) = (n.old_i)) and ((n.arr[6]) = (n.old_j))))) => ((((4) >= (0)) and ((6) >= (0))) and (((((n.arr[4]) <= (n.arr[6])) and (((n.old_i) > (n.old_j)) => (((n.arr[4]) = (n.old_j)) and ((n.arr[6]) = (n.old_i))))) and (((n.old_i) <= (n.old_j)) => (((n.arr[4]) = (n.old_i)) and ((n.arr[6]) = (n.old_j))))) => ((((2) >= (0)) and ((4) >= (0))) and (((((n.arr[2]) <= (n.arr[4])) and (((n.old_i) > (n.old_j)) => (((n.arr[2]) = (n.old_j)) and ((n.arr[4]) = (n.old_i))))) and (((n.old_i) <= (n.old_j)) => (((n.arr[2]) = (n.old_i)) and ((n.arr[4]) = (n.old_j))))) => ((((2) >= (0)) and ((3) >= (0))) and (((((n.arr[2]) <= (n.arr[3])) and (((n.old_i) > (n.old_j)) => (((n.arr[2]) = (n.old_j)) and ((n.arr[3]) = (n.old_i))))) and (((n.old_i) <= (n.old_j)) => (((n.arr[2]) = (n.old_i)) and ((n.arr[3]) = (n.old_j))))) => ((((5) >= (0)) and ((6) >= (0))) and (((((n.arr[5]) <= (n.arr[6])) and (((n.old_i) > (n.old_j)) => (((n.arr[5]) = (n.old_j)) and ((n.arr[6]) = (n.old_i))))) and (((n.old_i) <= (n.old_j)) => (((n.arr[5]) = (n.old_i)) and ((n.arr[6]) = (n.old_j))))) => (((((n.arr[0]) <= (n.arr[1])) and ((n.arr[1]) <= (n.arr[2]))) and (((n.arr[2]) <= (n.arr[3])) and ((n.arr[3]) <= (n.arr[4])))) and ((((n.arr[4]) <= (n.arr[5])) and ((n.arr[5]) <= (n.arr[6]))) and (((n.arr[6]) <= (n.arr[7])) and ((n.arr[7]) <= (n.arr[8])))))))))))))))))))))))))))))))))))))))))))))))))))))))
}

//The post-condition/class-invariant/loop-correctness of function (sort) is only valid when this is inconsistent.
run sortCheck for 8 but 8 int, 2 Bool, exactly 32 String

pred SWAPCheck[i:Int, j:Int]{
	some n: SortingNet| not ((((i) >= (0)) and ((j) >= (0))) => ((((n.arr[i]) > (n.arr[j])) => ((((n.arr[j]) <= (n.arr[i])) and (((n.arr[i]) > (n.arr[j])) => (((n.arr[j]) = (n.arr[j])) and ((n.arr[i]) = (n.arr[i]))))) and (((n.arr[i]) <= (n.arr[j])) => (((n.arr[j]) = (n.arr[i])) and ((n.arr[i]) = (n.arr[j])))))) and (((not ((n.arr[i]) > (n.arr[j]))) and (1=1)) => ((((n.arr[i]) <= (n.arr[j])) and (((n.arr[i]) > (n.arr[j])) => (((n.arr[i]) = (n.arr[j])) and ((n.arr[j]) = (n.arr[i]))))) and (((n.arr[i]) <= (n.arr[j])) => (((n.arr[i]) = (n.arr[i])) and ((n.arr[j]) = (n.arr[j]))))))))
}

//The post-condition/class-invariant/loop-correctness of function (SWAP) is only valid when this is inconsistent.
run {
	some i: Int| some j: Int| SWAPCheck[i, j]
} for 8 but 8 int, 2 Bool, exactly 32 String