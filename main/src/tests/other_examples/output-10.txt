
open util/boolean

//==============test==============
some sig test{
	result:Bool
}

fact testFact {
}

assert testAssert {
	all n: test| (n.result = True) <=> ((1=1) or (1=0))
}

//the class invariant for class (test) is only valid if this check is valid
check testAssert

pred notEqualCheck[x:Int, y:Int]{
	some n: test| not ((((x) > (0)) and ((y) > (0))) => ((((x) != (y)) => ((1=1) <=> ((x) != (y)))) and ((not ((x) != (y))) => ((1=0) <=> ((x) != (y))))))
}

//the post condition for function (notEqual) is only valid when this is inconsistent.
run {
	some x: Int| some y: Int| notEqualCheck[x, y]
}for 8 but 8 int, 2 Bool, exactly 32 String